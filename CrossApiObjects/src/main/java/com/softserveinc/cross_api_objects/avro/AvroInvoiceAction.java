/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.softserveinc.cross_api_objects.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroInvoiceAction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5396064135160261803L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroInvoiceAction\",\"namespace\":\"com.softserveinc.cross_api_objects.avro\",\"fields\":[{\"name\":\"userId\",\"type\":\"long\"},{\"name\":\"invoice\",\"type\":[{\"type\":\"record\",\"name\":\"AvroAttachment\",\"fields\":[{\"name\":\"attachmentUrl\",\"type\":\"string\"},{\"name\":\"attachmentName\",\"type\":\"string\"}]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroInvoiceAction> ENCODER =
      new BinaryMessageEncoder<AvroInvoiceAction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroInvoiceAction> DECODER =
      new BinaryMessageDecoder<AvroInvoiceAction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroInvoiceAction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroInvoiceAction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroInvoiceAction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroInvoiceAction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroInvoiceAction from a ByteBuffer. */
  public static AvroInvoiceAction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long userId;
  @Deprecated public com.softserveinc.cross_api_objects.avro.AvroAttachment invoice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroInvoiceAction() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param invoice The new value for invoice
   */
  public AvroInvoiceAction(java.lang.Long userId, com.softserveinc.cross_api_objects.avro.AvroAttachment invoice) {
    this.userId = userId;
    this.invoice = invoice;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return invoice;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.Long)value$; break;
    case 1: invoice = (com.softserveinc.cross_api_objects.avro.AvroAttachment)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.Long getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'invoice' field.
   * @return The value of the 'invoice' field.
   */
  public com.softserveinc.cross_api_objects.avro.AvroAttachment getInvoice() {
    return invoice;
  }

  /**
   * Sets the value of the 'invoice' field.
   * @param value the value to set.
   */
  public void setInvoice(com.softserveinc.cross_api_objects.avro.AvroAttachment value) {
    this.invoice = value;
  }

  /**
   * Creates a new AvroInvoiceAction RecordBuilder.
   * @return A new AvroInvoiceAction RecordBuilder
   */
  public static com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder newBuilder() {
    return new com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder();
  }

  /**
   * Creates a new AvroInvoiceAction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroInvoiceAction RecordBuilder
   */
  public static com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder newBuilder(com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder other) {
    return new com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder(other);
  }

  /**
   * Creates a new AvroInvoiceAction RecordBuilder by copying an existing AvroInvoiceAction instance.
   * @param other The existing instance to copy.
   * @return A new AvroInvoiceAction RecordBuilder
   */
  public static com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder newBuilder(com.softserveinc.cross_api_objects.avro.AvroInvoiceAction other) {
    return new com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder(other);
  }

  /**
   * RecordBuilder for AvroInvoiceAction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroInvoiceAction>
    implements org.apache.avro.data.RecordBuilder<AvroInvoiceAction> {

    private long userId;
    private com.softserveinc.cross_api_objects.avro.AvroAttachment invoice;
    private com.softserveinc.cross_api_objects.avro.AvroAttachment.Builder invoiceBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.invoice)) {
        this.invoice = data().deepCopy(fields()[1].schema(), other.invoice);
        fieldSetFlags()[1] = true;
      }
      if (other.hasInvoiceBuilder()) {
        this.invoiceBuilder = com.softserveinc.cross_api_objects.avro.AvroAttachment.newBuilder(other.getInvoiceBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AvroInvoiceAction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.softserveinc.cross_api_objects.avro.AvroInvoiceAction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.invoice)) {
        this.invoice = data().deepCopy(fields()[1].schema(), other.invoice);
        fieldSetFlags()[1] = true;
      }
      this.invoiceBuilder = null;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.Long getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder setUserId(long value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'invoice' field.
      * @return The value.
      */
    public com.softserveinc.cross_api_objects.avro.AvroAttachment getInvoice() {
      return invoice;
    }

    /**
      * Sets the value of the 'invoice' field.
      * @param value The value of 'invoice'.
      * @return This builder.
      */
    public com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder setInvoice(com.softserveinc.cross_api_objects.avro.AvroAttachment value) {
      validate(fields()[1], value);
      this.invoiceBuilder = null;
      this.invoice = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'invoice' field has been set.
      * @return True if the 'invoice' field has been set, false otherwise.
      */
    public boolean hasInvoice() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'invoice' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.softserveinc.cross_api_objects.avro.AvroAttachment.Builder getInvoiceBuilder() {
      if (invoiceBuilder == null) {
        if (hasInvoice()) {
          setInvoiceBuilder(com.softserveinc.cross_api_objects.avro.AvroAttachment.newBuilder(invoice));
        } else {
          setInvoiceBuilder(com.softserveinc.cross_api_objects.avro.AvroAttachment.newBuilder());
        }
      }
      return invoiceBuilder;
    }

    /**
     * Sets the Builder instance for the 'invoice' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder setInvoiceBuilder(com.softserveinc.cross_api_objects.avro.AvroAttachment.Builder value) {
      clearInvoice();
      invoiceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'invoice' field has an active Builder instance
     * @return True if the 'invoice' field has an active Builder instance
     */
    public boolean hasInvoiceBuilder() {
      return invoiceBuilder != null;
    }

    /**
      * Clears the value of the 'invoice' field.
      * @return This builder.
      */
    public com.softserveinc.cross_api_objects.avro.AvroInvoiceAction.Builder clearInvoice() {
      invoice = null;
      invoiceBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroInvoiceAction build() {
      try {
        AvroInvoiceAction record = new AvroInvoiceAction();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.Long) defaultValue(fields()[0]);
        if (invoiceBuilder != null) {
          record.invoice = this.invoiceBuilder.build();
        } else {
          record.invoice = fieldSetFlags()[1] ? this.invoice : (com.softserveinc.cross_api_objects.avro.AvroAttachment) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroInvoiceAction>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroInvoiceAction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroInvoiceAction>
    READER$ = (org.apache.avro.io.DatumReader<AvroInvoiceAction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
